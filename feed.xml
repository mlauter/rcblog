<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Miriam at Hacker School</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="https://mlauter.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="https://mlauter.github.io" />
<updated>2014-09-11T01:06:03-04:00</updated>
<id>https://mlauter.github.io/</id>
<author>
  <name>Miriam Lauter</name>
  <uri>https://mlauter.github.io/</uri>
  <email>lauter.miriam@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[How to Make Your Own Smart AC]]></title>
  <link rel="alternate" type="text/html" href="https://mlauter.github.io/how-to-make-your-own-smart-ac/" />
  <id>https://mlauter.github.io/how-to-make-your-own-smart-ac</id>
  <published>2014-09-10T19:56:51-04:00</published>
  <updated>2014-09-10T19:56:51-04:00</updated>
  <author>
    <name>Miriam Lauter</name>
    <uri>https://mlauter.github.io</uri>
    <email>lauter.miriam@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;http://techli.com/wp-content/uploads/2011/10/415.jpeg&quot; /&gt;
Remember that late-90s Disney Channel Original Movie &lt;a href=&quot;http://en.wikipedia.org/wiki/Smart_House_(film)&quot;&gt;&lt;em&gt;Smart House&lt;/em&gt;&lt;/a&gt; in which a young, motherless, computer-genius boy wins a fully automated robot-house, only to have the house-software come alive as an overbearing 50s-esque mother who locks the boy and his family indoors ‘for their own good’? &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;…maybe you don’t remember. But &lt;em&gt;I&lt;/em&gt; do, and I have always wanted to build that. Except without the sexist/robot-takeover part (jeez Disney, what is your deal with mothers?).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;!-- &lt;p&gt;&lt;br /&gt;&lt;/p&gt;  --&gt;

&lt;p&gt;Well, I didn’t quite do that. But, I did build a pretty neat device and web app for controlling my air conditioner. 
&lt;!-- &lt;p&gt;&lt;br /&gt;&lt;/p&gt; --&gt;
&lt;!-- how to phrase?? --&gt;&lt;/p&gt;

&lt;h1 id=&quot;heres-a-step-by-step-guide-to-what-i-did&quot;&gt;Here’s a step-by-step guide to what I did.&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Note, before starting this project, I’d never used a raspberry pi (I’d done just a tiny bit of Arduino), I’d never written a server, and I’d never made a web app of any kind. So, if you’re coming to this with just a bit of programming experience, take heart! This is a totally doable project.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;parts-and-tools&quot;&gt;Parts and Tools&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../images/ac_project_toolkit.jpg&quot; alt=&quot;toolkit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;components-of-the-finished-project&quot;&gt;Components of the finished project&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Raspberry Pi (I used &lt;a href=&quot;https://www.adafruit.com/products/1914&quot;&gt;this&lt;/a&gt; one)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/268&quot;&gt;Power Switch (or just a relay)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/814&quot;&gt;USB wifi for raspberry pi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/102&quot;&gt;A micro SD card&lt;/a&gt; (if you are using RPi B+, otherwise check your specs)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/381&quot;&gt;Digital temperature sensor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.adafruit.com/products/592&quot;&gt;Micro USB charger for the raspberry pi&lt;/a&gt; + &lt;a href=&quot;https://www.adafruit.com/products/501&quot;&gt;wall adapter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;4.7K resistor&lt;/li&gt;
  &lt;li&gt;Jumper wires, both &lt;a href=&quot;http://www.ebay.com/itm/40-Pin-20cm-Dupont-Wire-Connector-Cable-2-54mm-Male-to-Male-1P-1P-For-Arduino-/221455439425?ssPageName=ADME:X:RTQ:US:1123&quot;&gt;male&lt;/a&gt; and &lt;a href=&quot;http://www.ebay.com/itm/Dupont-Wire-20cm-Cable-Line-Color-40P-40P-Test-Lines-Connector-/221402540531&quot;&gt;female&lt;/a&gt;
  &lt;em&gt;Tip! this ebay seller is reliable and cheap&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ebay.com/itm/10pcs-DIY-Prototype-Paper-PCB-Universal-Experiment-Matrix-Circuit-Board-5-x-7cm-/221542018120]&quot;&gt;Prototype Paper PCB &lt;/a&gt; (DIY circuit board)&lt;/li&gt;
  &lt;li&gt;Your computer&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Soldering iron and solder&lt;/li&gt;
  &lt;li&gt;A very very skinny phillips head screwdriver&lt;/li&gt;
  &lt;li&gt;A hot glue gun&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;for-testingsetup-only&quot;&gt;For testing/setup only&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;A &lt;a href=&quot;https://www.adafruit.com/products/64&quot;&gt;breadboard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://www.sparkfun.com/products/9590&quot;&gt;LED&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A monitor, keyboard, and ethernet cable (for setting up the pi)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-up-the-pi&quot;&gt;Set up the Pi&lt;/h2&gt;
&lt;p&gt;I cannot stress this strongly enough: &lt;strong&gt;&lt;a href=&quot;https://learn.adafruit.com/&quot;&gt;Adafruit&lt;/a&gt; tutorials for allll the things!&lt;/strong&gt; Their tutorials are super informative and easy to follow. Plus they also sell all the parts. It’s a one stop super shop for all things hardware.&lt;/p&gt;

&lt;p&gt;If you already have a Raspberry Pi set up, or you feel comfortable getting started by going directly to Adafruit, downloading an OS image to your SD card, configuring, setting up wifi, etc, just continue with this post.&lt;/p&gt;

&lt;p&gt;If you want some more help getting started, check out my &lt;a href=&quot;../getting-started-with-raspberry-pi&quot;&gt;companion blog post&lt;/a&gt; on getting your Raspberry Pi set up as a first-time user.&lt;/p&gt;

&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;../images/acproject_schematic.jpg&quot; alt=&quot;diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you don’t want to read this whole post and just want to see the code I used, check out &lt;a href=&quot;https://github.com/mlauter/RemoteAC&quot;&gt;my github repo&lt;/a&gt;. &lt;code&gt;ac_ping.py&lt;/code&gt; contains the code running on the Pi, while the app folder contains everthing for the server and UI, including the Procfile for deploying on Heroku. You’ll have to change the URLs, secret key, and username password, I’ve put in place-holders.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;part-i-the-hardware-building-your-circuit&quot;&gt;Part I: The Hardware: building your circuit&lt;/h1&gt;

&lt;p&gt;Before I get started with this section of the post, I want to thank &lt;a href=&quot;http://polkapolka.net/&quot;&gt;Dana Sniezko&lt;/a&gt;, a fellow Hacker Schooler and hardware genius, for helping me SO much with this project. Seriously, Dana, if you’re reading this, thank you for letting me bug you with questions for weeks and for teaching me all this awesome stuff. &lt;/p&gt;

&lt;h2 id=&quot;raspberry-pi----powerswitch-relay----air-conditioner&quot;&gt;Raspberry Pi – PowerSwitch (relay) – Air conditioner&lt;/h2&gt;

&lt;p&gt;As you can see in the diagram, this is the only part of the entire system that interacts with the air conditioner. Instead of connecting your air conditioner’s power plug directly into the wall socket, you will plug it into the PowerSwitch Tail II, and plug the other end of that into the wall. (Make sure to check your air conditioner’s electrical specifications, because the PowerSwitch can only handle up to 15 amps. Most ACs will draw far less than that, though, mine only draws about 5). &lt;/p&gt;

&lt;p&gt;Now the cool part. Inside the black box that is now between your air conditioner and the wall socket there is a relay, which is just an electrically controlled switch. When you send power to the switch from one of your Raspberry Pi’s GPIO (general purpose input/output) pins, the switch will close and power will flow between the wall and the AC. When no power is flowing from the Pi to the switch, the switch will be open, and no power will flow between the wall and the AC. 
&lt;img src=&quot;../images/powerswitch.jpg&quot; alt=&quot;powerswitch&quot; /&gt;
Make sure that your AC is always set to be ‘on’, we’re bypassing the air conditioner’s normal on/off control system. &lt;/p&gt;

&lt;p&gt;Let’s set that up. Consult the &lt;a href=&quot;http://www.raspberry-projects.com/pi/wp-content/uploads/2014/09/rpi_model_b_plus_io_pinouts.jpg&quot;&gt;pinout map&lt;/a&gt; for your Raspberry Pi. I find it useful to look at one that shows a picture of the Pi, so you can make sure you’re oriented correctly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/rpi_model_b_plus_io_pinouts.jpg&quot; alt=&quot;pinoutmap&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure your Raspberry Pi is not plugged into power while you are working on this.&lt;/li&gt;
  &lt;li&gt;Choose any pin labeled GPIO except GPIO4 (which we need to reserve for our temperature sensor). 
  For example, on the map above, pin number 11, the 6th pin down in the left column is GPIO17. &lt;/li&gt;
  &lt;li&gt;Take one of your jumper wires (a red one would be a good choice), and connect it to that pin. &lt;/li&gt;
  &lt;li&gt;Now connect one of the male to male jumper wires to that wire. &lt;/li&gt;
  &lt;li&gt;Find a pin labeled ground (GND) and connect another wire (black or grey would be a good choice), and again connect that to one of the male to male wires.&lt;/li&gt;
  &lt;li&gt;Connect the power (wire from the GPIO pin) to &lt;em&gt;1: +in&lt;/em&gt; on the PowerSwitch, and your ground wire to &lt;em&gt;2: -in&lt;/em&gt;. Ignore the spot labeled &lt;em&gt;3:Ground&lt;/em&gt; on the PowerSwitch. &lt;/li&gt;
  &lt;li&gt;You’ll notice that on the face of the power switch with labels, there are some holes with screws in them. Use a small screw driver to adjust these screws such that your jumper wires are secured in the powerswitch and cannot be tugged out. &lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Note: while you are testing, you don’t need the power switch at all, just plug the wires into a breadboard and &lt;a href=&quot;https://projects.drogon.net/raspberry-pi/gpio-examples/tux-crossing/gpio-examples-1-a-single-led/&quot;&gt;use an LED&lt;/a&gt;. If you can turn the light on and off, you can turn your AC on and off.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;../images/powerswitch_connected.jpg&quot; alt=&quot;power switch plugged in&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rpi-gpio-library&quot;&gt;RPi-GPIO library&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.adafruit.com/playing-sounds-and-using-buttons-with-raspberry-pi/install-python-module-rpi-dot-gpio&quot;&gt;Install RPi-GPIO on your Pi&lt;/a&gt;&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;as&lt;/span&gt; io
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;io.setmode(io.BCM)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;switch_pin = &lt;span style=&quot;color:#00D&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;io.setup(switch_pin, io.OUT)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#blink 10 times&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;for&lt;/span&gt; i &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;range&lt;/span&gt;(&lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;):  
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;)   &lt;span style=&quot;color:#777&quot;&gt;# set output pin LOW (off)&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    time.sleep(&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)   &lt;span style=&quot;color:#777&quot;&gt;# sleep for 5 seconds&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;True&lt;/span&gt;)    &lt;span style=&quot;color:#777&quot;&gt;# set out put pin HIGH (on)&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    time.sleep(&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;io.cleanup() &lt;span style=&quot;color:#777&quot;&gt;#reset the pins&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We will adapt this blinking light for controlling the relay later on. Note, in order to use GPIO you have to run as root! &lt;/p&gt;

&lt;h2 id=&quot;digital-temperature-sensor&quot;&gt;Digital Temperature sensor&lt;/h2&gt;

&lt;p&gt;Checkout &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-11-ds18b20-temperature-sensing/hardware&quot;&gt;this tutorial&lt;/a&gt;. The circuit diagram is slightly confusing so here is another I find easier to read:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/RasPi_DS18B20.jpg&quot; alt=&quot;temp sensor circuit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For testing, set this up on the circuit board. You can send power and ground to the bus along the side.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;When you set this up for real: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Take a sheet of PCB (it doesn’t need to be large, so you can break off a piece if you want)
1.. Cut off the connecter end of the jumper wires coming from the pi and strip off the covering&lt;/li&gt;
  &lt;li&gt;Put the wire through a hole of the pc.&lt;/li&gt;
  &lt;li&gt;Strip down the leads from the temperature sensor.&lt;/li&gt;
  &lt;li&gt;Solder red to red, yellow to yellow, black to black.&lt;/li&gt;
  &lt;li&gt;Solder your resistor between red and yellow.&lt;/li&gt;
  &lt;li&gt;Use your hot glue gun to put a blob of glue over the blobs of solder. (Not strictly necessary, but a good thing to do).&lt;/li&gt;
  &lt;li&gt;Use something to secure the cord of the temperature sensor to your circuit board (so that you don’t end up putting a lot of strain on individual wires). I used a hairband.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are some pictures of my circuit, both top and bottom sides.
&lt;img src=&quot;../images/tempsensorcircuit_frontback.jpg&quot; alt=&quot;my temp sensor circuit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;
&lt;p&gt;Continue following the &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-11-ds18b20-temperature-sensing/ds18b20&quot;&gt;adafruit tutorial from above&lt;/a&gt; to set up the directory for the temperature sensor for the first time. &lt;/p&gt;

&lt;p&gt;Once you’ve done that, here is the code you will use. I copied it directly into my own program. &lt;em&gt;Note: I noticed that for some reason, every time I wanted to restart my program, I had to cd into my device folder first, otherwise I’d get an error saying that the folder didn’t exist.&lt;/em&gt;&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;os.system(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modprobe w1-gpio&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;os.system(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modprobe w1-therm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;base_dir = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/sys/bus/w1/devices/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;device_folder = glob.glob(base_dir + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;28*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)[&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;device_file = device_folder + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/w1_slave&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;read_temp_raw&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    f = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;open&lt;/span&gt;(device_file, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    lines = f.readlines()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    f.close()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; lines
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;read_temp&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    lines = read_temp_raw()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;while&lt;/span&gt; lines[&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;].strip()[-&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;:] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;YES&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;        time.sleep(&lt;span style=&quot;color:#60E&quot;&gt;0.2&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;        lines = read_temp_raw()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    equals_pos = lines[&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;].find(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t=&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; equals_pos != -&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;        temp_string = lines[&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;][equals_pos+&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;:]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;        temp_c = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;float&lt;/span&gt;(temp_string) / &lt;span style=&quot;color:#60E&quot;&gt;1000.0&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;        temp_f = temp_c * &lt;span style=&quot;color:#60E&quot;&gt;9.0&lt;/span&gt; / &lt;span style=&quot;color:#60E&quot;&gt;5.0&lt;/span&gt; + &lt;span style=&quot;color:#60E&quot;&gt;32.0&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; temp_c, temp_f
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;That’s it for the hardware side of this project. I’ll return to the full program I have running on the Pi in Part III. &lt;/p&gt;

&lt;h1 id=&quot;part-ii-the-server&quot;&gt;Part II: The Server&lt;/h1&gt;

&lt;p&gt;If this is not new to you, write your server however you want, just make sure that your pi can make POST requests to some route that will add information to a database.&lt;/p&gt;

&lt;p&gt;If this is new to you, I’ll do a quick overview of my Flask server, and you can check out the code for yourself on &lt;a href=&quot;https://github.com/mlauter/RemoteAC/blob/master/app/app.py&quot;&gt;github&lt;/a&gt;. Note, this will not be a Flask tutorial. If you’ve never used Flask or written a server, I highly recommend &lt;a href=&quot;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world&quot;&gt;Miguel Grinberg’s Flask Mega-Tutorial&lt;/a&gt;. Though it is much more information than you need for this project. I also recommend the &lt;a href=&quot;https://realpython.com/blog/python/python-web-applications-with-flask-part-i/&quot;&gt;realpython tutorial&lt;/a&gt; and their &lt;a href=&quot;https://github.com/realpython/discover-flask&quot;&gt;‘discover flask’&lt;/a&gt; video series.&lt;/p&gt;

&lt;p&gt;The server I’ve written is intended to be used by just two clients, you, and your Raspberry Pi. It is not intended for a large scale app.&lt;/p&gt;

&lt;h2 id=&quot;the-three-main-routes&quot;&gt;The three main routes&lt;/h2&gt;

&lt;p&gt;My server has three main routes, &lt;code&gt;/index&lt;/code&gt;, &lt;code&gt;/ac_status&lt;/code&gt;, and &lt;code&gt;/switch_state&lt;/code&gt;.Here is what they do.&lt;/p&gt;

&lt;h3 id=&quot;index--the-homepage&quot;&gt;/Index : The Homepage&lt;/h3&gt;
&lt;p&gt;This route (which can also be accessed with the bare &lt;code&gt;/&lt;/code&gt;), runs the homepage function which returns the homepage, &lt;code&gt;index.html&lt;/code&gt;. &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#B0B&quot;&gt;@app.route&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, methods = [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#B0B&quot;&gt;@app.route&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/index&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, methods = [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;homepage&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    current_log = db.get_last_ac_state()
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    room_temp = current_log[&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    is_running = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;bool&lt;/span&gt;(current_log[&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; render_template(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;index.html&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, room_temp = room_temp, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;                            is_running = is_running, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;                            time=datetime.datetime.now())
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;acstatus-the-route-for-the-raspberry-pi&quot;&gt;/ac_status: The route for the Raspberry Pi&lt;/h3&gt;

&lt;p&gt;This route only accepts POST requests. We will run code on the Pi to POST to this route every second with its most up-to-date state information. &lt;/p&gt;

&lt;p&gt;The function called in this route &lt;code&gt;update()&lt;/code&gt; will take the info from the Pi, and store it in a sqlite database (using the &lt;code&gt;sqlite3&lt;/code&gt; module in python). Check out &lt;code&gt;db.py&lt;/code&gt; to see my database functions.&lt;/p&gt;

&lt;p&gt;It will then return the information stored in a global variable called &lt;code&gt;desired-state&lt;/code&gt; to the Pi. &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;AcState = namedtuple(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;AcState&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;                    [&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;timestamp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;room_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;is_running&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;                    &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#B0B&quot;&gt;@app.route&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/ac_status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, methods=[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;update&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    response = request.json
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    room_temp = response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;room_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    is_running = response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;is_running&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    state_num = response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] &lt;span style=&quot;color:#777&quot;&gt;#1, 2, or 3&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#an empty string or an integer&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    goal_temp = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;str&lt;/span&gt;(response[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]) 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;print&lt;/span&gt; room_temp
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;print&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;I heard from the AC&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;    db.add_ac_state(AcState(datetime.datetime.now(),
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;                            room_temp,is_running,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;                            state_num,goal_temp))
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;global&lt;/span&gt; desired_state
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; jsonify(desired_state)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I will discuss how I handle the &lt;code&gt;desired-state&lt;/code&gt; shortly.&lt;/p&gt;

&lt;h3 id=&quot;switchstate-the-route-that-the-ui-will-hit&quot;&gt;/switch_state: The route that the UI will hit&lt;/h3&gt;

&lt;p&gt;This route takes both GET and POST requests, and it calls the function, &lt;code&gt;switch_state&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;First, it gets the latest information from the database. If the request is just a GET, the function will simply return the latest information from the database to the browser. If it’s a POST request, however, we’ll first call another function &lt;code&gt;statify&lt;/code&gt;, to translate what the user has asked for on the browser end, into something easy to convey to the air conditioner, and we’ll update the global &lt;code&gt;desired_state&lt;/code&gt; variable.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#B0B&quot;&gt;@app.route&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/switch_state&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, methods=[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;switch_state&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    current_log = db.get_last_ac_state()
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    current_state = (current_log[&lt;span style=&quot;color:#00D&quot;&gt;4&lt;/span&gt;], current_log[&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#if we have a post request, do this stuff, &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#otherwise just populate the page &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#with the latest database state&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; request.method == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;print&lt;/span&gt; request.json
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;global&lt;/span&gt; desired_state
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;        desired_state = statify(request.json)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;        desired_state_tup = (desired_state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;                             desired_state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;        current_log = db.get_last_ac_state()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;        current_state = (current_log[&lt;span style=&quot;color:#00D&quot;&gt;4&lt;/span&gt;], current_log[&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;])
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#need to return stuff that the browser will then use&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; jsonify(is_running = current_log[&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;], 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;                   state_num=current_state[&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;                   goal_temp=current_state[&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;representing-the-state-of-the-ac-desiredstate-and-statify&quot;&gt;Representing the state of the AC: desired_state and statify&lt;/h3&gt;

&lt;p&gt;In order to make the program on the Pi as simple as possible, I’ve decided to represent what I want the air conditioner to be doing in three different states. &lt;strong&gt;1: Completely and totally OFF. 2: Completely and totally ON. 3: Trying to maintain a particular temperature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because state 3 requires a temperature, I’ve represented all the states as a dictionary of &lt;code&gt;{state number:?, temperature:?}&lt;/code&gt;, where the temperature is the empty string if we have state 1 or 2, or an integer (converted to a string) in fahrenheit for state 3. &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#initialize desired_state to a dictionary &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#representing the off state&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;desired_state={&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;statify&lt;/span&gt;(ui_state):
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#takes in inputs from the browser and returns &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#an allowable state to give the AC as a dictionary. &lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    allowed_states = {&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;OFF&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:{&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;},
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;                      &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ON&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:{&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;},
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;                      &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MANAGE_TEMP&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:{&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;                                     &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;str&lt;/span&gt;(ui_state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;desired_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])}}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    cleaned_state = {}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; ui_state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;desired_power_state&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] == &lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;        cleaned_state=allowed_states[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;OFF&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;elif&lt;/span&gt; ui_state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;desired_mode_is_home&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;        cleaned_state=allowed_states[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;MANAGE_TEMP&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;        cleaned_state=allowed_states[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ON&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; cleaned_state
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;login-and-logout-routes&quot;&gt;Login and logout routes&lt;/h3&gt;

&lt;p&gt;I’ve added login and logout routes to my final server program. I’m not going to explain how to do that here, but you can look at my code, or go to this &lt;a href=&quot;https://realpython.com/blog/python/introduction-to-flask-part-2-creating-a-login-page/&quot;&gt;realpython tutorial&lt;/a&gt;. I recommend watching the video. Make sure to add the @login_required decorator to the appropriate functions.&lt;/p&gt;

&lt;h3 id=&quot;htmluser-interface&quot;&gt;HTML/User interface&lt;/h3&gt;

&lt;p&gt;You’ll need some pages for these routes to return. To start out, I recommend just using some plain HTML, and later, you can add onto it with some javascript and CSS to make the UI better. I’m using some jQuery and CSS Bootstrap. My HTML templates are &lt;a href=&quot;https://github.com/mlauter/RemoteAC/tree/master/app/templates&quot;&gt;here&lt;/a&gt;, js is &lt;a href=&quot;https://github.com/mlauter/RemoteAC/blob/master/app/static/on_off.js&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;UI design was decidedly &lt;em&gt;not&lt;/em&gt; the focus of this project, and I’d love suggestions for making it better:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/ac_website.png&quot; alt=&quot;UI&quot; /&gt; &lt;/p&gt;

&lt;h1 id=&quot;part-iii-the-raspberry-pi-program&quot;&gt;Part III: The Raspberry Pi program&lt;/h1&gt;

&lt;p&gt;Now that we have our server, we can flesh out the code that’s going to run on the pi. &lt;/p&gt;

&lt;p&gt;So far, we have some functions that allow us to read from the temperature sensor (I’ve added one that just returns the temperature in fahrenheit), and we’ve imported the &lt;code&gt;RPi-GPIO&lt;/code&gt; library and set up our switch pin. I’ve also added a function to read off the value of the switch pin, so we know whether power is flowing to our AC or not.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;as&lt;/span&gt; io
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#setup for GPIO&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;io.setmode(io.BCM)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;switch_pin = &lt;span style=&quot;color:#00D&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;io.setup(switch_pin, io.OUT)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#setup for the temperature sensor&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;os.system(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modprobe w1-gpio&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;os.system(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;modprobe w1-therm&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;base_dir = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/sys/bus/w1/devices/&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;device_folder = glob.glob(base_dir + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;28*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;device_file = device_folder[&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;] + &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/w1_slave&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#functions to read from temp sensor&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;read_temp_raw&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;    f = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;open&lt;/span&gt;(device_file, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;r&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    lines = f.readlines()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;    f.close()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; lines
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;read_temp&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;    lines = read_temp_raw()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;while&lt;/span&gt; lines[&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;].strip()[-&lt;span style=&quot;color:#00D&quot;&gt;3&lt;/span&gt;:] != &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;YES&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        time.sleep(&lt;span style=&quot;color:#60E&quot;&gt;0.2&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;        lines = read_temp_raw()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;    equals_pos = lines[&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;].find(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t=&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; equals_pos != -&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;        temp_string = lines[&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;][equals_pos+&lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;:]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;        temp_c = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;float&lt;/span&gt;(temp_string) / &lt;span style=&quot;color:#60E&quot;&gt;1000.0&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;        temp_f = temp_c * &lt;span style=&quot;color:#60E&quot;&gt;9.0&lt;/span&gt; / &lt;span style=&quot;color:#60E&quot;&gt;5.0&lt;/span&gt; + &lt;span style=&quot;color:#60E&quot;&gt;32.0&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n37&quot; name=&quot;n37&quot;&gt;37&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; temp_c, temp_f
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n38&quot; name=&quot;n38&quot;&gt;38&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n39&quot; name=&quot;n39&quot;&gt;39&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;current_temperature&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n40&quot; name=&quot;n40&quot;&gt;40&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    temperature = read_temp()[&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n41&quot; name=&quot;n41&quot;&gt;41&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;int&lt;/span&gt;(temperature)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n42&quot; name=&quot;n42&quot;&gt;42&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n43&quot; name=&quot;n43&quot;&gt;43&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#777&quot;&gt;#Check the whether switch_pin is HIGH or LOW&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n44&quot; name=&quot;n44&quot;&gt;44&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;is_running&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n45&quot; name=&quot;n45&quot;&gt;45&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; io.input(switch_pin)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now, we’ll just add two more main functions to this program. One to make POST requests to the server, and one to set the state of the air conditioner.&lt;/p&gt;

&lt;h2 id=&quot;post-requests-to-the-server&quot;&gt;POST requests to the server&lt;/h2&gt;

&lt;p&gt;This is the ‘hey, server!’ function. In the main loop of our program, we’ll call it every second. The Raspberry pi will POST its current state to the server, and the server will respond with the desired state from the user. We can then pass this information off to a different function that will decide what to do with the information.&lt;/p&gt;

&lt;p&gt;First, install and import the python &lt;a href=&quot;http://docs.python-requests.org/en/latest/&quot;&gt;Requests&lt;/a&gt; library.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;send_current_state&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    r = requests.post(url, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;                      data=some data, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;                      headers=some header, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;                      timeout=&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we’ll define the parameters for the post request to use. The url should be either the IP address of your computer, if you are testing on localhost, or the address of your site, wherever you are hosting it, followed by the name of the route to hit (ac_status).&lt;/p&gt;

&lt;p&gt;The headers I’ve set allow requests to send data as json. &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;send_current_state&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;    url = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;your.url.here/ac_status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    headers = {&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Content-type&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;application/json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;               &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Accept&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text/plain&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;    r = requests.post(url, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;                      data=some data, 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;                      headers=some header, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;                      timeout=&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;We also need to decide what data to send to the server. Looking back at the code for our server, we need to send the current temperature in the room and  whether the air conditioner is on or off (We can get these values from the functions we just wrote). We also need to send the state number and goal temperature that together represent the air conditioner’s current state. &lt;em&gt;Note: I have a separate value for on or off so I can always know whether the air conditioner is on or off, even when the AC is acting as a thermostat.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In order to keep track of the state of the air conditioner, I’m going to initialize a variable in the main loop of the program called &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;send_current_state&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    data_to_be_sent = {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;is_running&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: is_running(),
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;room_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: current_temperature(),
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    url = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;your.url.here/ac_status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    headers = {&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Content-type&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;application/json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;               &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Accept&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text/plain&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    r = requests.post(url, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;                      data=some data, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;                      headers=some header, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;                      timeout=&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;__main__&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;    state={&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;        time.sleep(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;        send_current_state()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The last thing this function needs to do is get the server’s response and send off the user’s desired state to another function. We’ve called the request object &lt;code&gt;r&lt;/code&gt;, and when the POST request is made successfully, &lt;code&gt;r.json()&lt;/code&gt; will give you the server’s response as json.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color:#B44;font-weight:bold&quot;&gt;requests&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;send_current_state&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    data_to_be_sent = {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;is_running&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: is_running(),
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;room_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: current_temperature(),
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;],
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    }
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    url = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;your.url.here/ac_status&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    headers = {&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Content-type&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;application/json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;               &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Accept&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;text/plain&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    r = requests.post(url, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;                      data=some data, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;                      headers=some header, 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;                      timeout=&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;    state_num = r.json()[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    goal_temp = r.json()[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#The function we have to write next&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;    set_state(state_num,goal_temp)                      
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;setting-the-air-conditioners-state&quot;&gt;Setting the air conditioner’s state&lt;/h2&gt;

&lt;p&gt;We’ll define a function, &lt;code&gt;set_state&lt;/code&gt; that will take two arguments, a state number (1, 2, or 3) and a goal temperature, which, as we defined in our server code will be the empty string if the state number is 1 or 2. &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;set_state&lt;/span&gt;(state_num, goal_temp):
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;# get the room temperature again&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;    room_temp = current_temperature()
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#handle states&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; state_num == &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;elif&lt;/span&gt; state_num == &lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#set the new state&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] = state_num
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    state[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;] = goal_temp
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;State 1&lt;/strong&gt; means the air conditioner should be off no matter what, and &lt;strong&gt;State 2&lt;/strong&gt; means the AC should be on no matter what, so these conditions are quite simple. We’ll either set the switch pin HIGH or LOW.&lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#777&quot;&gt;#handle states&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; state_num == &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;        io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        goal_temp = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;elif&lt;/span&gt; state_num == &lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;        io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;True&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;        goal_temp = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;State 3&lt;/strong&gt; is slightly more complicated. The air conditioner should compare the temperature requested by the user to the room temperature, turn or stay on if the room is too hot, and turn or stay off if the room is at the right temperature or too cold. &lt;/p&gt;

&lt;p&gt;In an effort to save energy and keep the air conditioner from turning on and off in rapid succession right on the edge of the goal temperature, I set a temperature range. The lower-bound is the goal temperature and the upper-bound is two degrees warmer. (Using it in my own room, I found this to be a reasonable and comfortable range). Of course, the air conditioner still vacillates rapidly around the borders of this range, an issue I have yet to fix. A better way to handle this might be to disallow changes for a certain amount of time after the air conditioner has turned on or off. I would love suggestions! I’ve made it an open issue on the github repo. &lt;/p&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#777&quot;&gt;# don&#39;t get warmer than 2 degrees above goal&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;        goal_temp_range_max = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;int&lt;/span&gt;(goal_temp) + &lt;span style=&quot;color:#00D&quot;&gt;2&lt;/span&gt; 
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; room_temp &amp;gt; goal_temp_range_max:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;            &lt;span style=&quot;color:#777&quot;&gt;# if we&#39;re hotter than the max, turn on&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;            io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;True&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;elif&lt;/span&gt; room_temp &amp;lt;= goal_temp:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;            &lt;span style=&quot;color:#777&quot;&gt;# if we&#39;re at or under the temp range, turn off&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;            io.output(switch_pin, &lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        &lt;span style=&quot;color:#777&quot;&gt;#otherwise do nothing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cleanup-and-error-handling&quot;&gt;Cleanup and error handling&lt;/h2&gt;

&lt;p&gt;My final program has a little bit more code in it to handle problems. The goal of this code is to a) keep the program alive even if the server doesn’t respond, and b) make sure to turn the air conditioner off if something goes seriously wrong or the program is going to exit. &lt;/p&gt;

&lt;p&gt;My strategy for waiting out periods of server unresponsiveness is: &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep track of the time of the last successful communication&lt;/li&gt;
  &lt;li&gt;If the server doesn’t respond and it’s been less than five minutes since the last successful request, just keep trying.&lt;/li&gt;
  &lt;li&gt;If it’s been more than five minutes, turn the AC off and keep trying.&lt;/li&gt;
&lt;/ol&gt;

&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;signal_handler&lt;/span&gt;(signal, frame):
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;    cleanup()
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color:#06B;font-weight:bold&quot;&gt;cleanup&lt;/span&gt;():
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;    io.cleanup()
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;    sys.exit(&lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; __name__ == &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;__main__&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;    state={&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;state_num&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;,&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;goal_temp&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;:&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;}
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    last_connect = &lt;span style=&quot;color:#069&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;True&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;            time.sleep(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;try&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;                pre_connect = datetime.now()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;                send_current_state()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;                last_connect = datetime.now()
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;            &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;except&lt;/span&gt; &lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;IOError&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;as&lt;/span&gt; e:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;print&lt;/span&gt; e
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;                t_delt = timedelta(minutes=&lt;span style=&quot;color:#00D&quot;&gt;5&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; last_connect:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; datetime.now()&amp;gt;(last_connect+t_delt):
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;                        io.output(switch_pin,&lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;)
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;                &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;else&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;                    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; datetime.now()&amp;gt;(pre_connect+t_delt):
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;                        io.output(switch_pin,&lt;span style=&quot;color:#069&quot;&gt;False&lt;/span&gt;) 
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;except&lt;/span&gt; &lt;span style=&quot;color:#C00;font-weight:bold&quot;&gt;Exception&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;as&lt;/span&gt; e:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;print&lt;/span&gt; e
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;finally&lt;/span&gt;:
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;        cleanup()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h1 id=&quot;final-notes&quot;&gt;Final notes&lt;/h1&gt;

&lt;h2 id=&quot;host-your-server-somewhere-or-deploy-it-to-heroku&quot;&gt;Host your server somewhere or deploy it to Heroku&lt;/h2&gt;

&lt;p&gt;I followed &lt;a href=&quot;https://devcenter.heroku.com/articles/python-gunicorn&quot;&gt;these instructions&lt;/a&gt; to deploy my server to Heroku. You will need a Procfile. Mine is in the repo in the app directory, and it’s just one line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;web: gunicorn app:app --log-file=-&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;keep-your-pi-program-running-without-an-ssh-session&quot;&gt;Keep your Pi program running without an ssh session&lt;/h2&gt;

&lt;p&gt;Once your server is deployed, make sure you put in the correct URL into the program that will run on the Raspberry Pi. &lt;/p&gt;

&lt;p&gt;In order to keep a process running on the Pi even after you’ve closed your ssh session, just put &lt;code&gt;nohup&lt;/code&gt; in front of the command you would normally run. Also, keep in mind that the GPIO library requires root privileges! &lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup sudo python ac_ping.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;now-you-have-your-own-smart-ac&quot;&gt;Now you have your own Smart AC!&lt;/h1&gt;

&lt;p&gt;Go make cool stuff!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;https://mlauter.github.io/how-to-make-your-own-smart-ac/&quot;&gt;How to Make Your Own Smart AC&lt;/a&gt; was originally published by Miriam Lauter at &lt;a href=&quot;https://mlauter.github.io&quot;&gt;Miriam at Hacker School&lt;/a&gt; on September 10, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Getting Started With Raspberry Pi]]></title>
  <link rel="alternate" type="text/html" href="https://mlauter.github.io/getting-started-with-raspberry-pi/" />
  <id>https://mlauter.github.io/getting-started-with-raspberry-pi</id>
  <published>2014-09-09T21:53:27-04:00</published>
  <updated>2014-09-09T21:53:27-04:00</updated>
  <author>
    <name>Miriam Lauter</name>
    <uri>https://mlauter.github.io</uri>
    <email>lauter.miriam@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I originally wrote this post as a companion to my &lt;a href=&quot;../how-to-make-your-own-smart-ac&quot;&gt;Make your own Smart AC&lt;/a&gt; post for those who might want a bit more guidance setting up their Raspberry Pi. Everything in the post, however, is generally applicable, so if you’re embarking on some other project, that’s awesome too, and I hope my post can help.&lt;/p&gt;

&lt;h3 id=&quot;follow-this-adafruit-tutorial--httpslearnadafruitcomadafruit-raspberry-pi-lesson-1-preparing-and-sd-card-for-your-raspberry-pidownloading-an-image&quot;&gt;Follow this &lt;a href=&quot;https://learn.adafruit.com/adafruit-raspberry-pi-lesson-1-preparing-and-sd-card-for-your-raspberry-pi/downloading-an-image&quot;&gt;adafruit tutorial&amp;lt;–&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The following are some tips that I would have found helpful to know while I was trying to set up my Raspberry Pi. If you already know what you’re doing on that front, skip to the next section.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download an OS image onto your SD card. (I used Raspbian.)
  Step 7 of the tutorial is a bit scary: “Enter the number next to the SD card drive. Make sure you get this right, because whichever drive you select will be erased.”
  Don’t freak out. It is pretty likely that your SD card is /dev/disk1s1 like it says in the tutorial, but here is how to check (on a Mac).
    &lt;ul&gt;
      &lt;li&gt;Hit the apple in the top left corner&lt;/li&gt;
      &lt;li&gt;About this mac&lt;/li&gt;
      &lt;li&gt;Click system report&lt;/li&gt;
      &lt;li&gt;If you are using the builtin SD card reader, click on Card Reader under hardware. If you’re using a USB reader, click USB.&lt;/li&gt;
      &lt;li&gt;You should see the information about your SD card.&lt;/li&gt;
      &lt;li&gt;Look for “BSD Name”&lt;br /&gt;
  &lt;img src=&quot;../images/SDcardinfo.png&quot; alt=&quot;SDCardinfo&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Put the SD card into your raspberry pi’s SD card slot (for the B+ this is on the underside)&lt;/li&gt;
  &lt;li&gt;Either connect your computer to a keyboard and monitor as the tutorial suggests, or if you have a serial cable, connect the TX and RX of the cable to the RX and TX of the Pi. Checkout the &lt;a href=&quot;http://www.element14.com/community/servlet/JiveServlet/previewBody/68203-102-6-294412/GPIO.png&quot;&gt;pinout map&lt;/a&gt; below on the right to see where the RX and TX pins are located:
  &lt;img src=&quot;../images/serialcable.jpg&quot; alt=&quot;serialcable&quot; /&gt;
  Probably don’t do this unless you’ve already done it before, you need to be able to pull up a terminal/terminal emulation of the usb connected serial cable &lt;/li&gt;
  &lt;li&gt;Make sure to plug the Pi in using your micro usb power cable (into your computer’s USB port is fine), and connect it to the network with an ethernet cable.&lt;/li&gt;
  &lt;li&gt;Once you have brought the Pi up on a monitor or on your screen using the serial port method, you can run &lt;code&gt;ifconfig&lt;/code&gt; and find your IP address, and you can do the rest of this by ssh-ing into the Pi from your computer, if you want.
  &lt;code&gt;ssh username@ip.add.ress&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-2-first-time-configuration&quot;&gt;Do the first time configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;configure-wifi&quot;&gt;Configure wifi&lt;/h3&gt;
&lt;p&gt;Start by trying &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-3-network-setup/setting-up-wifi-with-occidentalis&quot;&gt;this&lt;/a&gt; Adafruit tutorial.&lt;/p&gt;

&lt;p&gt;Following this tutorial worked perfectly when I configured my Pi’s wifi at Hacker School, but when I brought it home, and tried to do it again on my home network, no dice. My home router used a different type of security, and yours might too. After a lot of googling and trial and error, I found something that worked for me. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I started &lt;a href=&quot;https://coderwall.com/p/v290ta&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Then I looked &lt;a href=&quot;http://raspberrypi.stackexchange.com/questions/15107/rpi-cant-connect-to-internet&quot;&gt;here&lt;/a&gt;–post 2, and &lt;a href=&quot;http://www.raspyfi.com/wi-fi-on-raspberry-pi-a-simple-guide/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Finally, I still had a DNS issue. To fix add the google nameservers to a file called resolv.conf:&lt;code&gt;Sudo nano /etc/resolv.conf&lt;/code&gt;(Nano is a text editor in linux.) Add the follwing lines:&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- ugh this looks super crappy --&gt;
&lt;div&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;nameserver &lt;span style=&quot;color:#60E&quot;&gt;8.8&lt;/span&gt;&lt;span style=&quot;color:#60E&quot;&gt;.8&lt;/span&gt;&lt;span style=&quot;color:#60E&quot;&gt;.8&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;nameserver &lt;span style=&quot;color:#60E&quot;&gt;8.8&lt;/span&gt;&lt;span style=&quot;color:#60E&quot;&gt;.4&lt;/span&gt;&lt;span style=&quot;color:#60E&quot;&gt;.4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;On your own computer, run nmap on your local computer to see if the Raspberry Pi is showing up on the network without ethernet (and get its new IP address). If the ip address of your computer is &lt;code&gt;192.168.1.3&lt;/code&gt;, for example, take the first three bits of the address and then add .0/24 to map the 256 hosts between 192.168.10.0 and .255. &lt;code&gt;nmap -sP 192.168.1.0/24&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should now be able to ssh into your Pi over wifi!&lt;/p&gt;

&lt;p&gt;Protip, if you hate using nano, and you want to use your local sublime to edit files on the Pi, download the &lt;a href=&quot;https://github.com/henrikpersson/rsub&quot;&gt;rsub&lt;/a&gt; package on package control, and follow &lt;a href=&quot;http://www.danieldemmel.me/blog/2012/09/02/setting-up-rmate-with-sublime-text-for-remote-file-editing-over-ssh/&quot;&gt;these&lt;/a&gt; steps.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://mlauter.github.io/getting-started-with-raspberry-pi/&quot;&gt;Getting Started With Raspberry Pi&lt;/a&gt; was originally published by Miriam Lauter at &lt;a href=&quot;https://mlauter.github.io&quot;&gt;Miriam at Hacker School&lt;/a&gt; on September 09, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Writing Snake in python]]></title>
  <link rel="alternate" type="text/html" href="https://mlauter.github.io/writing-snake-in-python/" />
  <id>https://mlauter.github.io/writing-snake-in-python</id>
  <published>2014-09-07T21:41:03-04:00</published>
  <updated>2014-09-07T21:41:03-04:00</updated>
  <author>
    <name>Miriam Lauter</name>
    <uri>https://mlauter.github.io</uri>
    <email>lauter.miriam@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I was supposed to be writing a blog post about the cool air conditioner controller I just made for myself, but instead I wrote Snake, that game you used to play on your cell phone, in python using pygame. Then, I couldn’t stop playing it:  &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;../images/snakedemo.gif&quot; alt=&quot;I wrote this!&quot; /&gt;&lt;/p&gt;

&lt;!-- &lt;iframe height=&quot;310&quot; width=&quot;480&quot;  src=&quot;https://www.youtube.com/embed/EIyixC9NsLI?start=22&amp;end=30&amp;autoplay=1&amp;version=3&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt; --&gt;

&lt;h2 id=&quot;things-that-were-surprisingly-easy&quot;&gt;Things that were surprisingly easy:&lt;/h2&gt;

&lt;h3 id=&quot;installing-pygame&quot;&gt;Installing pygame&lt;/h3&gt;

&lt;p&gt;The first time I tried to install pygame about a year ago, I got hopelessly stuck and gave up. It turns out though, that you can use Homebrew (if you are a mac user and use homebrew)! I did that following the instructions on this &lt;a href=&quot;http://www.reddit.com/r/pygame/comments/21tp7n/how_to_install_pygame_on_osx_mavericks/&quot;&gt;reddit subthread&lt;/a&gt;, thanks to Allison, one of the facilitators at Hacker School.&lt;/p&gt;

&lt;h3 id=&quot;using-pygame&quot;&gt;Using pygame&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.pygame.org/docs/&quot;&gt;documentation&lt;/a&gt; can be a little hard to get into right off the bat, but going through the first tutorial &lt;a href=&quot;http://www.pygame.org/docs/tut/intro/intro.html&quot;&gt;&lt;em&gt;Introduction to pygame&lt;/em&gt;&lt;/a&gt; gives you almost everything you need to know to make a simple game like snake.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;run &lt;code&gt;pygame.init()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make a screen:
  &lt;code&gt;screen = pygame.display.set_mode((width,height))&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;make a Surface object:
  &lt;code&gt;my_surface = pygame.Surface((width,height))&lt;/code&gt;
  (There are some other options available here, but I didn’t need them.)&lt;/li&gt;
  &lt;li&gt;blit the surface to the screen
  &lt;code&gt;screen.blit(my_surface,position)&lt;/code&gt;
  &lt;code&gt;position&lt;/code&gt; is a tuple defining the top left corner of your surface within the coordinates of your screen.
  No idea why this operation is called ‘blit’, but what it’s doing is copying a set of pixels onto another set of pixels. For example, copying the set of pixels representing your image (a Surface) onto the set of pixels that is your screen (another Surface).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;pygame.display.flip()&lt;/code&gt;
  This updates the visible display. you can also use &lt;code&gt;python pygame.display.update()&lt;/code&gt;, but the tutorial recommends &lt;code&gt;.flip()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can access key presses by calling &lt;code&gt;pygame.key.get_pressed()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I had to do a bit more googling to figure out how to display my ‘welcome’ and ‘you died’ messages, but that’s it for the pygame parts of the game, the rest is just python. &lt;/p&gt;

&lt;h2 id=&quot;things-that-were-challenging&quot;&gt;Things that were challenging&lt;/h2&gt;

&lt;h3 id=&quot;movement&quot;&gt;Movement&lt;/h3&gt;

&lt;p&gt;I was struggling to figure out how to get the body segments to follow the head around properly until Mary, one of the facilitators at Hacker School, suggested that I could just have the Head object move each body segment to the position of the segment in front of it. &lt;/p&gt;

&lt;h3 id=&quot;growing&quot;&gt;Growing&lt;/h3&gt;

&lt;p&gt;Mary also pointed out to me that it would be problematic to have the Snake grow from the back after eating, because if the snake’s head was one square away from the end of it’s tail, for example, it could die by eating the food in front of it and growing, which is not an outcome we want to allow.&lt;/p&gt;

&lt;p&gt;In order to avoid this, the snake grows by keeping the existing body segments in place for one update and just filling in another square between the head and the body. &lt;/p&gt;

&lt;p&gt;Also, it is important to make sure new Food objects don’t randomly place themselves on occupied squares.  &lt;/p&gt;

&lt;h2 id=&quot;other-stuff-to-consider&quot;&gt;Other stuff to consider&lt;/h2&gt;

&lt;h3 id=&quot;collisions&quot;&gt;Collisions&lt;/h3&gt;

&lt;p&gt;Because all my objects are the same size, all objects exist on a grid square within my screen, and all pygame Surface positions are defined by the upper left corner, determining whether there was a collision was just a matter of checking the positions of all pairs of objects in the game for equality. This would be a bit trickier if you had to check the full Surface for overlaps of any sort.&lt;/p&gt;

&lt;h2 id=&quot;waste-time&quot;&gt;Waste time!!&lt;/h2&gt;

&lt;p&gt;Play the game or have a look at the code &lt;a href=&quot;https://github.com/mlauter/py_snake&quot;&gt;here&lt;/a&gt;. The only dependency is pygame 1.9.1. Right now the code is around 250 lines, but I’m sure it could be tighter. Let me know if you have suggestions or some code review!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;http://cdn.makeagif.com/media/9-07-2014/WSN3aM.gif&quot; alt=&quot;asnake on Make A Gif&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://mlauter.github.io/writing-snake-in-python/&quot;&gt;Writing Snake in python&lt;/a&gt; was originally published by Miriam Lauter at &lt;a href=&quot;https://mlauter.github.io&quot;&gt;Miriam at Hacker School&lt;/a&gt; on September 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Baby Steps to Becoming an Open Source Contributor]]></title>
  <link rel="alternate" type="text/html" href="https://mlauter.github.io/baby-steps-to-becoming-an-open-source-contributor/" />
  <id>https://mlauter.github.io/baby-steps-to-becoming-an-open-source-contributor</id>
  <published>2014-08-19T16:12:52-04:00</published>
  <updated>2014-08-19T16:12:52-04:00</updated>
  <author>
    <name>Miriam Lauter</name>
    <uri>https://mlauter.github.io</uri>
    <email>lauter.miriam@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;Update added, Sep 5, see the end of the post&lt;/em&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Last week, I made my first pull request to an open source project, and it was accepted! The project is called &lt;a href=&quot;http://bpython-interpreter.org/&quot;&gt;bpython&lt;/a&gt;, and it’s a “fancy interface to the Python interpreter.” If you’ve ever used ipython, it’s kind of like that, but with some nifty other features like in-line syntax highlighting and autocompletion suggestions that pop up as you type (read more about it on the website). You can find bpython on github as well. &lt;/p&gt;

&lt;p&gt;My contribution was a really tiny bug fix (like, one-line-of-code-tiny)–not really something worth writing a whole blog post about. Instead, I want to talk about how you can get started contributing to an open source project, even if you’re a rank beginner like me. &lt;/p&gt;

&lt;p&gt;First, pick a project.&lt;/p&gt;

&lt;p&gt;I would recommend picking something that you are already using. You’ll be motivated to work on it, you’ll already know at least a bit about what it does, and you’ll be more likely to find bugs to fix in something you’re actually using.&lt;/p&gt;

&lt;p&gt;bpython was an especially good choice for me because Tom, a facilitator here at Hacker School, is one of the main contributors to the project, and a lot of other Hacker Schoolers have worked on it. &lt;/p&gt;

&lt;p&gt;Which brings me to my second point. If you’re not a very experienced programmer like me, and/or have never contributed to an open source project before, it might seem pretty intimidating. Contributing to an existing open source project was one of my main goals for Hacker School, but I was scared to take the plunge. Popping up on IRC and asking for guidance from some contributor seemed like an insurmountable hurdle, and I didn’t feel confident getting the dev environment set up by myself. So, talking to someone you know who is already a contributor to a project is a great way to go. I’m very lucky to be at Hacker School where I have easy access to lots of people contributing to various projects, but even if that isn’t the case for you, I still think reaching out to one person is less intimidating than reaching out to a whole group on IRC (though other people may feel differently).&lt;/p&gt;

&lt;p&gt;Third, get your development environment set up. Clone the github repo with the latest verison of the code base (any project will have instructions on their website about how to do this). For me this also involved setting up a python virtual environment and installing the necessary dependencies. (I also asked Tom a bunch of questions as I went.)&lt;/p&gt;

&lt;p&gt;Four, familiarize yourself with the code a bit. Tom walked me through the structure of the project and pointed out important directories and files. &lt;/p&gt;

&lt;p&gt;Five, go to github, click on the issues tab, and look for unresolved bugs. For bpython, this was especially easy because certain bugs have been marked “bitesize”–aka a good place to start if you’re new.&lt;/p&gt;

&lt;p&gt;I chose one of these “bitesize issues”: implementing granular traceback coloring (explanation: When you get an error message, the python interpreter prints the stack trace that lead to the error and the error message itself. Right now bpython just prints this information as a wall of red text, and I am trying to make it helpfully colorful.)&lt;/p&gt;

&lt;p&gt;As I was working on implementing this feature, I was using bpython a lot to test what I was working on. As I was doing this, I found another bug that was causing bpython to crash after typing a specific sequence of characters. Tom helped me figure out what was going on, I wrote in something to fix it, and we wrote a test case for it. And voila, a little while later, first pull request to an open source project accepted!&lt;/p&gt;

&lt;p&gt;So to sum up, if you want to contribute to an open source project, but you’re intimidated, find someone you can bug with lots of questions, get your dev environment set up, find a small bug, fix the small bug. &lt;/p&gt;

&lt;p&gt;The traceback coloring is almost done, so maybe I’ll have a second accepted pull request to report soon.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update: second pull request accepted. The latest version of bpython-curtsies now includes my colorful traceback/error messages. See the &lt;a href=&quot;https://github.com/bpython/bpython/pull/368&quot;&gt;pull request on github&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bpython3.png&quot; alt=&quot;a wall of red text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/bpython4.png&quot; alt=&quot;helpful colors&quot; /&gt;&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;https://mlauter.github.io/baby-steps-to-becoming-an-open-source-contributor/&quot;&gt;Baby Steps to Becoming an Open Source Contributor&lt;/a&gt; was originally published by Miriam Lauter at &lt;a href=&quot;https://mlauter.github.io&quot;&gt;Miriam at Hacker School&lt;/a&gt; on August 19, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Things I didn't understand before this week but now understand (at least somewhat) : Timsort]]></title>
  <link rel="alternate" type="text/html" href="https://mlauter.github.io/things-i-didnt-understand-before-this-week-but-tnow-understand-at-least-somewhat-timsort/" />
  <id>https://mlauter.github.io/things-i-didnt-understand-before-this-week-but-tnow-understand-at-least-somewhat-timsort</id>
  <updated>2014-07-31 01:22:45 -0400T00:00:00-00:00</updated>
  <published>2014-07-29T00:00:00-04:00</published>
  
  <author>
    <name>Miriam Lauter</name>
    <uri>https://mlauter.github.io</uri>
    <email>lauter.miriam@gmail.com</email>
  </author>
  <content type="html">&lt;table class=&quot;image&quot;&gt;
&lt;caption align=&quot;bottom&quot;&gt;timsort: from sortvis.org/algorithms/timsort.html&lt;/caption&gt;
&lt;tr&gt;&lt;td&gt;&lt;img src=&quot;http://sortvis.org/images/dense-timsort.png&quot; alt=&quot;timsort: from sortvis.org/algorithms/timsort.html&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This morning I was curious about how the built-in &lt;code&gt;sorted()&lt;/code&gt; function works in python. So with the help of Tom, one of the facilitators here at Hacker School, I took my first dive into the python source code.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
If you’ve heard anything about Timsort, what you probably know is that it takes advantage of partial ordering in the array you’re trying to sort in order to improve performance. Basically, instead of having a one-size-fits-all algorithm, Timsort chooses different approaches based on some stuff about the array it’s given.This is good because real world data is usually not totally random, that is, it usually does have some order or “sortedness” to it already. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
What I wanted to know, though, was how does this actually work?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I don’t know any C, but handily, within the CPython source code, there is a text file written by Tim Peters, explaining his eponymous function. Here is what I learned.&lt;/p&gt;

&lt;h3 id=&quot;if-the-array-that-you-are-trying-to-sort-has-fewer-than-64-elements-timsort-will-simply-do-a-binary-insertion-sort&quot;&gt;1. If the array that you are trying to sort has fewer than 64 elements, Timsort will simply do a &lt;strong&gt;binary insertion sort&lt;/strong&gt;.&lt;/h3&gt;

&lt;p&gt;In a normal insertion sort, you would start with the first element of the array and check it against the next item over. If the first item is greater than the second, you flip them, otherwise, you leave them where they are. Now you know your first two items are sorted, so you move on to the third item. You then figure out where the third item belongs by checking from right to left. If item 3 is larger than the preceeding item, you can leave it where it is. Otherwise, you need to check the first item. You continue on down the array until you’ve placed each item in its proper location.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/ROalU379l3U&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;In the &lt;em&gt;binary&lt;/em&gt; version, instead of searching through the elements one by one, you perform a binary search to find the appropriate location. This means, you go to the midway point of the array you’re searching through, and decide whether your item is greater or smaller. Once you pick a half, then you choose the midpoint of that half and check again. Repeat until you are checking an array of length 2, and you find your spot. Though this method doesn’t improve the running time O(n2) of insertion sort, it turns out that comparing two things is much more costly (at least in python?) than swapping, so it improves performance.&lt;/p&gt;

&lt;h3 id=&quot;the-notion-of-runs&quot;&gt;2. The notion of “&lt;strong&gt;runs&lt;/strong&gt;”&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;run&lt;/strong&gt; is a very important concept for Timsort. If you have an array longer    than 64 elements, the algorithm will take a first pass through the array checking    for chunks that are stricty increasing or strictly decreasing (if the chunk is    decreasing, it will be reversed). &lt;/p&gt;

&lt;p&gt;If these chunks are longer than a certain size, known as minrun, which is    determined based on the size of the array,&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;   footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; then this is a &lt;strong&gt;natural run&lt;/strong&gt;–it occured naturally in your    array. If the chunk is shorter than minrun, you grab &lt;code&gt;minrun - len(chunk)&lt;/code&gt; items    ahead of your chunk, and perform a &lt;strong&gt;binary insertion sort&lt;/strong&gt; to create an    artificial run. &lt;/p&gt;

&lt;p&gt;After this, what you have is an array of sorted chunks of varying lengths. If your    data was totally random, then chunks will probably all be close to the minrun    length. If not, you could have natural runs of wildly varying lengths:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/timsort_list_image.jpg&quot; alt=&quot;An array with consecutive, descending runs, a, b, and c&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;merging&quot;&gt;3. Merging&lt;/h3&gt;

&lt;p&gt;The next step is to merge sort your sorted chunks. We are only allowed to merge adjacent chunks so that items do not get out of order with respect to the intervening chunks. One important property of Timsort is that it is &lt;em&gt;stable&lt;/em&gt;,    meaning that items of equal value remain sorted in order with respect to their original positions in the list. (I’ll come back to this later).&lt;/p&gt;

&lt;p&gt;As Timsort finds runs, it adds them to a stack (so an item seen first in the array goes on first and is at the bottom of the stack).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/timsort_stack_image.jpg&quot; alt=&quot;the stack of runs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Timsort tries to balance two competing needs when merging runs. On the one hand,    we want to put off merging chunks in case it turns out merging our current run    with the next run would be better than (more efficient than) merging with the    previous run. On the other hand, we don’t want to let the stack get too big,    because then we’ll have to reach really far down to get those earlier items, which    would hinder performance. To enforce a compromise, Timsort keeps track of the    three most recent items on the stack and creates two laws that must hold true of    those items:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;a &amp;gt; b+c&lt;/li&gt;
      &lt;li&gt;b &amp;gt; c &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;If either of these laws are broken when a new run is pushed to the stack, items    are merged. If a is larger than c, a and b are merged, otherwise b and c are merged   .&lt;/p&gt;

&lt;h3 id=&quot;timruns-merge-sort&quot;&gt;4. Timrun’s merge sort&lt;/h3&gt;

&lt;p&gt;Normal merge sort (recall that our runs are already sorted within, so you can skip    to 3:25 in the video):&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/XaqR3G_NVoo&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Usually, merging adjacent runs of different lengths &lt;em&gt;in place&lt;/em&gt; (remember that    stable thing) is very hard. In order to get around this, Timsort sets aside some    temporary memory, and places the smaller of the two runs (let’s call them a and b)    into that temporary space. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/Timsort_tempmerge_image.jpg&quot; alt=&quot;temporary memory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or, imagine the line of ladies in white from the video move their line over to    stage left in front of the men. They perform the same operation (or dance)    checking the first item in a (women) against b(men), and the victor fills in the    spaces that a has vacated. (If b is smaller the merge sort has to be performed    backwards, but I won’t go into that.)&lt;/p&gt;

&lt;p&gt;Actually, what Timsort does is slightly more complicated than this, which brings    me to the last point:&lt;/p&gt;

&lt;h3 id=&quot;galloping&quot;&gt;5. Galloping&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/d/dd/Muybridge_race_horse_animated.gif&quot; alt=&quot;galloping&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So, Timsort is going along merging a and b, and it notices that one run or the    other has been “winning” many times in a row. For a concrete example, imagine if,    in the dancing video, it turned out that all the women had lower numbers than all    the men. All the women would just end up standing back in their original places,    but after doing a lot of extra work. &lt;/p&gt;

&lt;p&gt;Timsort takes advantage of the fact that data often has some preexisting internal    structure, and assumes that if a lot of a’s values are lower than b’s, then it is    likely that a will continue to have smaller values than b. &lt;/p&gt;

&lt;p&gt;Timsort then enters “galloping mode.” Instead of checking the first/leftmost    unsorted values of a and b against one another (i.e. going through one at a time),    Timsort performs a binary search for the appropriate position of b[0] in a[0].    That way, a whole slice of a can be moved back into place. Then it searches for    the appropriate location of a[0] in b, and a whole section of b can be moved at    once. &lt;/p&gt;

&lt;p&gt;It turns out, this operation is not worth it if the appropriate location for b[0]    is very close to the beginning of a (or vice versa), so gallop mode quickly exits    if it isn’t paying off. Additionally, Timsort takes note, and makes it harder to    enter gallop mode later by increasing the number of consecutive a-only or b-only    wins required to enter. If gallop mode &lt;em&gt;is&lt;/em&gt; paying off, Timsort makes it easier to    reenter. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
And there you have it, Timsort.&lt;/p&gt;

&lt;p&gt;An interesting note: Though Timsort’s great performance on arrays with some preexisting internal sorting is its best-known feature, it seems like having a stable sort was one of the main motivators behind adopting timsort. Previously, in order to achieve a stable sort, you’d have to zip the items in your list up with integers, and sort it as an array of tuples. How irritating.&lt;/p&gt;

&lt;p&gt;P.S. I know I’ve glossed over some complexity here, but that aside, if you’re reading this and think I’ve totally misunderstood or mis-explained something, just head on over to my github, and shoot me an email to let me know.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Minrun is a value between or including 32 to 64 such that len(array) equals or is slightly less than a power of 2. We&#39;ll see why this is important later on, but the idea is when you do a merge sort, you want to have a power of two number of things to sort. 
      	&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;


  &lt;p&gt;&lt;a href=&quot;https://mlauter.github.io/things-i-didnt-understand-before-this-week-but-tnow-understand-at-least-somewhat-timsort/&quot;&gt;Things I didn't understand before this week but now understand (at least somewhat) : Timsort&lt;/a&gt; was originally published by Miriam Lauter at &lt;a href=&quot;https://mlauter.github.io&quot;&gt;Miriam at Hacker School&lt;/a&gt; on July 29, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hello World]]></title>
  <link rel="alternate" type="text/html" href="https://mlauter.github.io/hello-world/" />
  <id>https://mlauter.github.io/hello-world</id>
  <published>2014-07-26T00:00:00-04:00</published>
  <updated>2014-07-26T00:00:00-04:00</updated>
  <author>
    <name>Miriam Lauter</name>
    <uri>https://mlauter.github.io</uri>
    <email>lauter.miriam@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;I just started &lt;a href=&quot;https://www.hackerschool.com/&quot;&gt;hacker school&lt;/a&gt;, and I’ll be here for the next three months. This is where I’ll post about what I’m working on and what I’m learning. &lt;/p&gt;

&lt;p&gt;The blog will have a regularly reoccuring series called &lt;strong&gt;Things I didn’t understand before this week but now understand (at least somewhat)&lt;/strong&gt;, or TIDUBTWBNU/AS, for short.&lt;/p&gt;

&lt;p&gt;Miriam&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://mlauter.github.io/hello-world/&quot;&gt;Hello World&lt;/a&gt; was originally published by Miriam Lauter at &lt;a href=&quot;https://mlauter.github.io&quot;&gt;Miriam at Hacker School&lt;/a&gt; on July 26, 2014.&lt;/p&gt;</content>
</entry>

</feed>
